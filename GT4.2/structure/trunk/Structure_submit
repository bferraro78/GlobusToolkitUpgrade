#!/usr/bin/perl

use strict;
use Cwd;
use GSBL::Client ':all';

use FindBin qw($RealBin);
use lib "$RealBin/../lib";

my %option_desc = ( 


	N => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "NUMINDS",
		 TAKES => qq{n},
		 DESC => qq{Change the number of individuals},
	},

	e => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "extraparams",
		 TAKES => qq{filename},
		 DESC => qq{Read a different parameter input file instead of 'extraparams'},
	},

	o => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "outputFile",
		 TAKES => qq{filename},
		 DESC => qq{Print results to a different output file},
	},

	replicates => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "replicates",
		 TAKES => qq{replicates},
		 DESC => qq{The number of times to execute this job.},
	},

	i => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "inputFile",
		 TAKES => qq{filename},
		 DESC => qq{Read a different input file},
	},

	L => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "NUMLOCI",
		 TAKES => qq{n},
		 DESC => qq{Change the number of loci},
	},

	jobname => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "jobname",
		 TAKES => qq{jobname},
		 DESC => qq{The arbitrary name to assign this job or batch of jobs.},
	},

	m => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "mainparams",
		 TAKES => qq{filename},
		 DESC => qq{Read a different parameter input file instead of 'mainparams'},
	},

	K => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "MAXPOPS",
		 TAKES => qq{n},
		 DESC => qq{Change the number of populations},
	},


);

my $properties = process_options(\%option_desc, "Structure");

my $pid = $$;
my $jobname = "not initialized";

if($properties =~ /jobname \@-- (.*) \@-- java.lang.String/) { # override job name
    $jobname = $1;
    my @properties_chunks = split(/\n/, $properties);
    my $new_properties = "";
    foreach my $chunk(@properties_chunks) {
	if(!($chunk =~ /jobname.*java.lang.String/)) {
	    $new_properties .= $chunk . "\n";
	}
    }
    $properties = $new_properties;
} else {
    my $wd = getcwd;
    $wd =~ /.*\/(.*)/;
    $wd = $1;
    $jobname = $wd;
}

open(PROPERTIES_OUT, ">Structure.properties.$pid") || die "Cannot write properties file: $!";
print PROPERTIES_OUT $properties;
close(PROPERTIES_OUT);

system("java -DGLOBUS_LOCATION=\$GLOBUS_LOCATION -classpath $RealBin:$RealBin/build/classes/:$RealBin/build/stubs/classes/:\$CLASSPATH edu.umd.grid.bio.structure.clients.StructureSubmitClient https://leucine.umiacs.umd.edu:8443/wsrf/services/edu/umd/grid/bio/structure/StructureFactoryService Structure.properties.$pid $jobname");

unlink("Structure.properties.$$");

