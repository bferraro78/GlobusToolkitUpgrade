#!/usr/bin/perl

use strict;
use Cwd;
use GSBL::Client ':all';

use FindBin qw($RealBin);
use lib "$RealBin/../lib";

my %option_desc = ( 


	ratematrix => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "ratematrix",
		 TAKES => qq{ratematrix},
		 DESC => qq{Rate matrix},
	},

	outputphyliptree => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "outputphyliptree",
		 DESC => qq{Write trees to file in Phylip format as well as Nexus format},
	},

	randnniweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "randnniweight",
		 TAKES => qq{randnniweight},
		 DESC => qq{NNI mutations},
	},

	ofprefix => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "ofprefix",
		 TAKES => qq{ofprefix},
		 DESC => qq{Output file prefix},
	},

	limsprweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "limsprweight",
		 TAKES => qq{limsprweight},
		 DESC => qq{Limited SPR mutations},
	},

	numratecats => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "numratecats",
		 TAKES => qq{numratecats},
		 DESC => qq{Number of rate categories},
	},

	uniqueswapbias => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "uniqueswapbias",
		 TAKES => qq{uniqueswapbias},
		 DESC => qq{Unique swap bias},
	},

	treerejectionthreshold => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "treerejectionthreshold",
		 TAKES => qq{treerejectionthreshold},
		 DESC => qq{Tree rejection threshold},
	},

	numtaxa => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "numtaxa",
		 DESC => qq{FOR INTERNAL USE ONLY},
	},

	modelsdata => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "modelsdata",
		 DESC => qq{Model configurations},
	},

	startoptprec => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "startoptprec",
		 TAKES => qq{startoptprec},
		 DESC => qq{Starting precision},
	},

	optimizeinputonly => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "optimizeinputonly",
		 DESC => qq{Only optimize model and branch lengths},
	},

	refinestart => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "refinestart",
		 DESC => qq{Perform initial rough optimization},
	},

	subsetspecificrates => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "subsetspecificrates",
		 DESC => qq{Set a rate for each partition},
	},

	topoweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "topoweight",
		 TAKES => qq{topoweight},
		 DESC => qq{All topology mutations},
	},

	constraintfile => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "constraintfile",
		 TAKES => qq{constraintfile},
		 DESC => qq{Constraint file},
	},

	replicates => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "replicates",
		 TAKES => qq{replicates},
		 DESC => qq{The number of times to execute this job.},
	},

	nindivs => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "nindivs",
		 TAKES => qq{nindivs},
		 DESC => qq{Number of individuals},
	},

	streefname_userdata => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "streefname_userdata",
		 TAKES => qq{streefname_userdata},
		 DESC => qq{Starting tree file},
	},

	profilingjob => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "profilingjob",
		 DESC => qq{Whether this is a profiling job or not.},
	},

	analysistype => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "analysistype",
		 TAKES => qq{analysistype},
		 DESC => qq{Analysis type},
	},

	distanceswapbias => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "distanceswapbias",
		 TAKES => qq{distanceswapbias},
		 DESC => qq{Relative weight assigned to branch swaps based on locality},
	},

	brlenweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "brlenweight",
		 TAKES => qq{brlenweight},
		 DESC => qq{Branch-length mutations},
	},

	minoptprec => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "minoptprec",
		 TAKES => qq{minoptprec},
		 DESC => qq{Minimum precision},
	},

	modweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "modweight",
		 TAKES => qq{modweight},
		 DESC => qq{Model mutations},
	},

	outgroup => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "outgroup",
		 TAKES => qq{outgroup},
		 DESC => qq{Outgroup taxa numbers, separated by spaces},
	},

	numberofprecreductions => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "numberofprecreductions",
		 TAKES => qq{numberofprecreductions},
		 DESC => qq{Number of precision reductions},
	},

	selectionintensity => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "selectionintensity",
		 TAKES => qq{selectionintensity},
		 DESC => qq{Selection intensity},
	},

	outputsitelikelihoods => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "outputsitelikelihoods",
		 DESC => qq{Output site likelihoods},
	},

	limsprrange => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "limsprrange",
		 TAKES => qq{limsprrange},
		 DESC => qq{Max limited SPR branch movement},
	},

	collapsebranches => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "collapsebranches",
		 DESC => qq{Collapse zero-length branches into polytomies},
	},

	geneticcode => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "geneticcode",
		 TAKES => qq{geneticcode},
		 DESC => qq{Genetic code},
	},

	conf => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "configFile",
		 TAKES => qq{conf_file(s)},
		 DESC => qq{The configuration file that holds all of the GARLI parameters},
	},

	gammashapebrlen => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "gammashapebrlen",
		 TAKES => qq{gammashapebrlen},
		 DESC => qq{Magnitude of branch-length mutations},
	},

	searchreps => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "searchreps",
		 DESC => qq{Number of search reps (for bootstrap runs)},
	},

	randsprweight => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "randsprweight",
		 TAKES => qq{randsprweight},
		 DESC => qq{SPR mutations},
	},

	novalidate => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "novalidate",
		 DESC => qq{Skip GARLI's validation of job input files.},
	},

	partitionsdata => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "partitionsdata",
		 DESC => qq{Partition Data},
	},

	inferinternalstateprobs => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "inferinternalstateprobs",
		 DESC => qq{Infer ancestral states},
	},

	streefname => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "streefname",
		 TAKES => qq{streefname},
		 DESC => qq{Starting tree type (none, random, stepwise, or upload)},
	},

	linkmodels => { 	TYPE => "none",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "linkmodels",
		 DESC => qq{Link models},
	},

	uniquepatterns => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "uniquepatterns",
		 DESC => qq{FOR INTERNAL USE ONLY},
	},

	invariantsites => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "invariantsites",
		 TAKES => qq{invariantsites},
		 DESC => qq{Proportion of invariant sites},
	},

	datafname => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "datafname",
		 TAKES => qq{datafname},
		 DESC => qq{File containing sequence dataset},
	},

	actualmemory => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "1",
		 KEY => "actualmemory",
		 DESC => qq{FOR INTERNAL USE ONLY},
	},

	ratehetmodel => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "ratehetmodel",
		 TAKES => qq{ratehetmodel},
		 DESC => qq{The model of rate heterogeneity},
	},

	resampleproportion => { 	TYPE => "f",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "resampleproportion",
		 TAKES => qq{resampleproportion},
		 DESC => qq{Relative size of resampled data matrix},
	},

	statefrequencies => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "statefrequencies",
		 TAKES => qq{statefrequencies},
		 DESC => qq{Base frequencies},
	},

	meanbrlenmuts => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "meanbrlenmuts",
		 TAKES => qq{meanbrlenmuts},
		 DESC => qq{Mean # of branch lengths to change per mutation},
	},

	jobname => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "jobname",
		 TAKES => qq{jobname},
		 DESC => qq{The arbitrary name to assign this job or batch of jobs.},
	},

	gammashapemodel => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "gammashapemodel",
		 TAKES => qq{gammashapemodel},
		 DESC => qq{Magnitude of model argument mutations},
	},

	datatype => { 	TYPE => "s",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "datatype",
		 TAKES => qq{datatype},
		 DESC => qq{Data type},
	},

	attachmentspertaxon => { 	TYPE => "i",
		 OPTIONAL_FLAG => "1",
		 OPTIONAL_VALUE => "0",
		 KEY => "attachmentspertaxon",
		 TAKES => qq{attachmentspertaxon},
		 DESC => qq{The number of attachment branches evaluated for each taxon},
	},


);

my $properties = process_options(\%option_desc, "GARLI");

my $pid = $$;
my $jobname = "not initialized";

if($properties =~ /jobname \@-- (.*) \@-- java.lang.String/) { # override job name
    $jobname = $1;
    my @properties_chunks = split(/\n/, $properties);
    my $new_properties = "";
    foreach my $chunk(@properties_chunks) {
	if(!($chunk =~ /jobname.*java.lang.String/)) {
	    $new_properties .= $chunk . "\n";
	}
    }
    $properties = $new_properties;
} else {
    my $wd = getcwd;
    $wd =~ /.*\/(.*)/;
    $wd = $1;
    $jobname = $wd;
}

open(PROPERTIES_OUT, ">GARLI.properties.$pid") || die "Cannot write properties file: $!";
print PROPERTIES_OUT $properties;
close(PROPERTIES_OUT);

system("java -DGLOBUS_LOCATION=\$GLOBUS_LOCATION -classpath $RealBin:$RealBin/build/classes/:$RealBin/build/stubs/classes/:\$CLASSPATH edu.umd.grid.bio.garli.clients.GARLISubmitClient https://lysine.umiacs.umd.edu:8443/wsrf/services/edu/umd/grid/bio/garli/GARLIFactoryService GARLI.properties.$pid $jobname");

unlink("GARLI.properties.$$");

