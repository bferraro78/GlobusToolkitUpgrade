<?xml version="1.0"?>

<!-- TODO: Update program name and version -->                                                                                                  
<program name="IM" version="1.0"
        xmlns="http://cummings.umiacs.umd.edu/GSBL/service_description"
        xmlns:tns="http://cummings.umiacs.umd.edu/GSBL/service_description"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://cummings.umiacs.umd.edu/GSBL/service_description http://cummings.umiacs.umd.edu/GSBL/service_description.xsd">
	<!-- TODO: Update argument list -->
    <arguments>
                <argument key="jobname">
                        <flag>jobname</flag>
                        <type>java.lang.String</type>
                        <description>The arbitrary name to assign this job or batch of jobs.</description>
                        <takes>jobname</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
                <argument key="replicates">
                        <flag>replicates</flag>
                        <type>java.lang.Integer</type>
                        <description>The number of times to execute this job.</description>
                        <takes>replicates</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
	        <argument key="recordKeeping">
			<flag>a</flag>
			<type>java.lang.Integer</type>
			<description>number of steps between record keeping (default is 10)</description>
			<takes>steps</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="burnDuration">
			<flag>b</flag>
			<type>java.lang.String</type>
			<description>duration of burn (if integer, the number of burnin steps; if floating point, the time in hours of burnin period)</description>
			<takes>duration</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="burnHeating">
                        <flag>bh</flag>
                        <type>java.lang.Integer</type>
                        <description>ramped heating scheme for burn, -bh default is ~100,000 steps</description>
                        <takes>burnheat</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
		<argument key="geneUpdates">
			<flag>d</flag>
			<type>java.lang.Integer</type>
			<description>number of genealogy updates per step (default is 1)</description>
			<takes>updates</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="time">
                        <flag>e</flag>
                        <type>java.lang.Integer</type>
                        <description>time (hours) between save of checkpoint file (e0 for only after burn)</description>
                        <takes>time</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
		<argument key="heatMode">
			<flag>f</flag>
			<type>java.lang.String</type>
			<description>heat mode: l linear (default); t twostep; a adaptive twostep; g geometric</description>
			<takes>h_mode</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="heatParamFirst">
			<flag>g1</flag>
			<type>java.lang.Double</type>
			<description>first heating parameter, effect depends on heating mode (default 0.05)</description>
			<takes>param_1</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="heatParamSecond">
			<flag>g2</flag>
			<type>java.lang.Double</type>
			<description>second heating parameter, effect depends on heating mode</description>
			<takes>param_2</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="comment">
                        <flag>h</flag>
                        <type>java.lang.String</type>
                        <description>comment for output file (no spaces)</description>
                        <takes>comment</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
		<argument key="inputFile">
			<flag>i</flag>
			<type>java.lang.String</type>
			<description>input file name (no spaces)</description>
			<takes>in_file</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="runOptions">
			<flag>j</flag>
			<type>java.lang.Integer</type>
			<description>0: likelihood() functions return 1 - posterior should equal prior | 1: for 4Nu priors (q1,q2,qa) use command-line values as actual priors (default: priors = product of command-line values and data estimates) | 2: treat inheritance scalars as parameters.(default= input file value or 1) | 3: include ranges on mutation rates as priors on mutation rate scalars | 4: set t to a very large value, mimics two population island model | 5: set t = 0 to mimic one large panmictic population of size thetaA | 6: set theta1 = theta2 = thetaA | 7: set m1 = m2 | 8: each locus has a pair of migration rates, m1 and m2 | 9: turn on population size change (include splitting parameter)</description>
			<takes>run_opt</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="chainSwaps">
			<flag>k</flag>
			<type>java.lang.Integer</type>
			<description>with multiple chains (-n) the number of chain swap attempts per step</description>
			<takes>chain_swaps</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="runDuration">
			<flag>l</flag>
			<type>java.lang.String</type>
			<description>duration of run (if integer, the number of steps in the chains; if floating point, the time in hours between outputs. run continues until file IMrun is no longer present in the directory, or if present, does not begin with 'y')</description>
			<takes>duration</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="migrationOut">
			<flag>m1</flag>
			<type>java.lang.Double</type>
			<description>maximum migration rate from population 1 to population 2</description>
			<takes>mig_1-2</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="migrationIn">
			<flag>m2</flag>
			<type>java.lang.Double</type>
			<description>maximum migration rate from population 2 to population 1</description>
			<takes>mig_2-1</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="numChains">
			<flag>n</flag>
			<type>java.lang.Integer</type>
			<description>number of chains</description>
			<takes>chains</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="outputFile">
			<flag>o</flag>
			<type>java.lang.String</type>
			<description>output file name (no spaces)</description>
			<takes>out_file</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="outOptions">
			<flag>p</flag>
			<type>java.lang.Integer</type>
			<description>output options (default is no options): 0: print file of values of basic parameters (file can be enormous!) | 1: print TMRCA histogram for each locus | 2: print histogram of parameters on demographic scales | 3: print histograms of # migration events and mean migration times | 4: print ASCII-based trends of parameters | 5: print ASCII-based posterior density curves | 6: print smoothed distributions of marginal log likelihoods</description>
			<takes>out_opt</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="thetaOneMax">
			<flag>q1</flag>
			<type>java.lang.Integer</type>
			<description>scalar for theta1 maximum</description>
			<takes>t1_max</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="thetaTwoMax">
			<flag>q2</flag>
			<type>java.lang.Integer</type>
			<description>scalar for theta2 maximum (default = scalar for theta1 maximum)</description>
			<takes>t2_max</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="thetAMax">
			<flag>qA</flag>
			<type>java.lang.Integer</type>
			<description>scalar for thetaA maximum (default = scalar for theta1 maximum)</description>
			<takes>tA_max</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="randomSeed">
			<flag>s</flag>
			<type>java.lang.Integer</type>
			<description>random number seed (default is taken from current time)</description>
			<takes>seed</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="sLower">
                        <flag>sl</flag>
                        <type>java.lang.Double</type>
                        <description>lower limit of range for population split parameter s</description>
                        <takes>s_lower</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
                <argument key="sUpper">
                        <flag>su</flag>
                        <type>java.lang.Double</type>
                        <description>upper limit of range for population split parameter s</description>
                        <takes>s_upper</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
		<argument key="maxTime">
			<flag>t</flag>
			<type>java.lang.Integer</type>
			<description>maximum time of population splitting</description>
			<takes>max_time</takes>
			<optionalFlag>false</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
		<argument key="genTime">
			<flag>u</flag>
			<type>java.lang.Integer</type>
			<description>generation time in years  (default is 1)</description>
			<takes>gen_time</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="minTime">
                        <flag>w</flag>
                        <type>java.lang.Integer</type>
                        <description>minimum time of population splitting (default is 0)</description>
                        <takes>min_time</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
		<argument key="windowWidth">
			<flag>v</flag>
			<type>java.lang.String</type>
			<description>window width adjust for t updating - reduce window size w/ multiple loci</description>
			<takes>w_width</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
                <argument key="ckptFile">
                        <flag>x</flag>
                        <type>java.lang.String</type>
                        <description>'*.dck' file name for starting from a previous run</description>
                        <takes>ckptfile</takes>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>false</optionalValue>
                </argument>
                <argument key="restartAfterBurn">
                        <flag>y</flag>
                        <type>none</type>
                        <description>restart as if burn just ended, use with -x and '*.dck' file</description>
                        <optionalFlag>true</optionalFlag>
                        <optionalValue>true</optionalValue>
                </argument>
		<argument key="displaySteps">
			<flag>z</flag>
			<type>java.lang.String</type>
			<description>number of steps between output to the monitor (default 10000)</description>
			<takes>disp_steps</takes>
			<optionalFlag>true</optionalFlag>
			<optionalValue>false</optionalValue>
		</argument>
       	</arguments>
</program>
