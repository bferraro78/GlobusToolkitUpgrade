.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Client 3"
.TH Client 3 "2010-02-02" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
GSBL::Client \- Perl module for writing grid clients
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  use GSBL::Client ":all";
\&  my %options = (O => { TYPE => "s", 
\&                KEY => "outputFile", 
\&                TAKES => "output_file",
\&                OPTIONAL_FLAG => 1,
\&                OPTIONAL_VALUE => 0,
\&                DESC => "the file to which to write output"},
\&        ); 
\&  my $properties = process_options(\e%options);
\&  if (@ARGV != 2) { # Assume program takes 2 arguments
\&      print_usage(\e%option_desc, "program_name");
\&  }
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
GSBL::Client is a Perl module for writing grid clients.
It provides functions for processing command-line arguments and 
writing Java properties files read by the Java grid clients.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GSBL::Client is a Perl module for writing grid clients. Currently,
it focuses on argument processing. Arguments are described in a hash
whose keys are argument names (either single characters for short 
(e.g., \-x) options or strings for long (e.g., \-\-foo) options) and whose
values are hash references describing the options. The hash references
may contain the following key/value pairs:
.PP
.Vb 3
\& TYPE => the type of the value taken by the argument. Should be i for 
\&    integer, f for float, s for string, and either "none" or "" for 
\&    no value.
.Ve
.PP
.Vb 1
\& KEY => the key to be written in the properties file for this argument.
.Ve
.PP
.Vb 4
\& TAKES => short description of what the argument accepts; will be used 
\&    when printing a usage message. E.g., for the example hash above, 
\&    the TAKES parameter will result in an argument description of
\&    -O output_file      the file to which to write output
.Ve
.PP
.Vb 3
\& OPTIONAL_FLAG => boolean value indicating whether or not the argument
\&        is optional.  If it is not specified, then the argument is assumed
\&        optional.
.Ve
.PP
.Vb 4
\& OPTIONAL_VALUE => boolean value indicating whether or not the argument's 
\&    value is optional. If it is not specified, then the value is 
\&    assumed mandatory.  This only applies if TYPE is not set 
\&    to "none" or "".
.Ve
.PP
.Vb 3
\& DESC => Help text describing the option; used when printing usage 
\&    messages.  It will be automatically line-wrapped, but try to 
\&    keep it concise.
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
None by default. 
.SH "METHODS"
.IX Header "METHODS"
.IP "process_options(options_desc)" 4
.IX Item "process_options(options_desc)"
This function process command-line arguments using the options described
in the hash reference options_desc. It returns a Java properties file
as a string.
.IP "map_option_type_to_java_type($type)" 4
.IX Item "map_option_type_to_java_type($type)"
Maps the contents of the \s-1TYPE\s0 value to a Java type.
.IP "print_usage(options, program_name)" 4
.IX Item "print_usage(options, program_name)"
This function prints a usage message for the program. Options is 
a hash reference describing the options accepted by the program,
and program_name is the name of the program.
.IP "get_wsdl_type(type)" 4
.IX Item "get_wsdl_type(type)"
This function maps the options hash \s-1TYPE\s0 field to a \s-1WSDL\s0 type.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Sumers Myers, <dmyers@umiacs.umd.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004 by Daniel Sumers Myers
.Sp
This library is free software distributed under the \s-1GPL\s0.
